/**
 * Weather - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Open-Meteo API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
 */

const API_BASE_URL = 'https://api.open-meteo.com/v1/forecast';
const GEO_API_URL = 'https://geocoding-api.open-meteo.com/v1/search';

const cityInput = document.getElementById('city-input');
const searchButton = document.getElementById('search-button');
const errorMessage = document.getElementById('error-message');
const loadingIndicator = document.getElementById('loading');
const weatherSection = document.getElementById('weather-section');
const cityNameElement = document.getElementById('city-name');
const currentDateElement = document.getElementById('current-date');
const currentTempElement = document.getElementById('current-temp');
const weatherIconElement = document.getElementById('weather-icon');
const weatherDescriptionElement = document.getElementById('weather-description');
const feelsLikeElement = document.getElementById('feels-like');
const humidityElement = document.getElementById('humidity');
const windElement = document.getElementById('wind');
const pressureElement = document.getElementById('pressure');
const forecastContainer = document.getElementById('forecast-container');

const weatherIcons = {
    0: '‚òÄÔ∏è', // –Ø—Å–Ω–æ
    1: 'üå§Ô∏è', // –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ
    2: '‚õÖ', // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
    3: '‚òÅÔ∏è', // –ü–∞—Å–º—É—Ä–Ω–æ
    45: 'üå´Ô∏è', // –¢—É–º–∞–Ω
    48: 'üå´Ô∏è', // –¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º
    51: 'üåßÔ∏è', // –õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å
    53: 'üåßÔ∏è', // –£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å
    55: 'üåßÔ∏è', // –°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å
    56: 'üåßÔ∏è', // –õ–µ–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å
    57: 'üåßÔ∏è', // –°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å
    61: 'üå¶Ô∏è', // –õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å
    63: 'üåßÔ∏è', // –£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å
    65: 'üåßÔ∏è', // –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
    66: 'üåßÔ∏è', // –õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
    67: 'üåßÔ∏è', // –°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å
    71: '‚ùÑÔ∏è', // –õ–µ–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥
    73: '‚ùÑÔ∏è', // –£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥
    75: '‚ùÑÔ∏è', // –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥
    77: '‚ùÑÔ∏è', // –°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞
    80: 'üå¶Ô∏è', // –õ–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏
    81: 'üåßÔ∏è', // –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏
    82: 'üåßÔ∏è', // –°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏
    85: 'üå®Ô∏è', // –õ–µ–≥–∫–∏–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å
    86: 'üå®Ô∏è', // –°–∏–ª—å–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å
    95: '‚õàÔ∏è', // –ì—Ä–æ–∑–∞
    96: '‚õàÔ∏è', // –ì—Ä–æ–∑–∞ —Å –ª–µ–≥–∫–∏–º –≥—Ä–∞–¥–æ–º
    99: '‚õàÔ∏è'  // –ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º
};

const weatherDescriptions = {
    0: '–Ø—Å–Ω–æ',
    1: '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ',
    2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
    3: '–ü–∞—Å–º—É—Ä–Ω–æ',
    45: '–¢—É–º–∞–Ω',
    48: '–¢—É–º–∞–Ω —Å –∏–Ω–µ–µ–º',
    51: '–õ–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
    53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å',
    55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
    56: '–õ–µ–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å',
    57: '–°–∏–ª—å–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å',
    61: '–õ–µ–≥–∫–∏–π –¥–æ–∂–¥—å',
    63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
    65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
    66: '–õ–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
    67: '–°–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å',
    71: '–õ–µ–≥–∫–∏–π —Å–Ω–µ–≥–æ–ø–∞–¥',
    73: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
    75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥',
    77: '–°–Ω–µ–∂–Ω—ã–µ –∑–µ—Ä–Ω–∞',
    80: '–õ–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏',
    81: '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏',
    82: '–°–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏',
    85: '–õ–µ–≥–∫–∏–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å',
    86: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–∂–Ω—ã–π –ª–∏–≤–µ–Ω—å',
    95: '–ì—Ä–æ–∑–∞',
    96: '–ì—Ä–æ–∑–∞ —Å –ª–µ–≥–∫–∏–º –≥—Ä–∞–¥–æ–º',
    99: '–ì—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º'
};

const weekdays = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];

const months = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
];

function initApp() {
    searchButton.addEventListener('click', searchWeather);
    cityInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            searchWeather();
        }
    });

    const lastCity = localStorage.getItem('lastCity');
    if (lastCity) {
        cityInput.value = lastCity;
        searchWeather();
    }
}

function formatDate(date) {
    const day = date.getDate();
    const month = months[date.getMonth()];
    const weekday = weekdays[date.getDay()];

    return `${weekday}, ${day} ${month} ${date.getFullYear()}`;
}

async function getCoordinates(cityName) {
    try {
        const response = await fetch(`${GEO_API_URL}?name=${encodeURIComponent(cityName)}&count=1`);
        const data = await response.json();

        if (!data.results || data.results.length === 0) {
            throw new Error('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        return {
            latitude: data.results[0].latitude,
            longitude: data.results[0].longitude,
            name: data.results[0].name,
            country: data.results[0].country
        };
    } catch (error) {
        throw error;
    }
}

async function getWeatherData(latitude, longitude) {
    try {
        const url = `${API_BASE_URL}?latitude=${latitude}&longitude=${longitude}&current=temperature_2m,relative_humidity_2m,apparent_temperature,precipitation,weather_code,pressure_msl,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,precipitation_sum&timezone=auto`;

        const response = await fetch(url);
        const data = await response.json();

        return data;
    } catch (error) {
        throw error;
    }
}

function updateWeatherUI(weatherData, locationData) {
    const now = new Date();
    currentDateElement.textContent = formatDate(now);

    cityNameElement.textContent = `${locationData.name}, ${locationData.country}`;

    const currentTemp = Math.round(weatherData.current.temperature_2m);
    currentTempElement.textContent = `${currentTemp}¬∞C`;

    const weatherCode = weatherData.current.weather_code;
    weatherIconElement.textContent = weatherIcons[weatherCode] || 'üåà';
    weatherDescriptionElement.textContent = weatherDescriptions[weatherCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    feelsLikeElement.textContent = `${Math.round(weatherData.current.apparent_temperature)}¬∞C`;
    humidityElement.textContent = `${weatherData.current.relative_humidity_2m}%`;
    windElement.textContent = `${Math.round(weatherData.current.wind_speed_10m)} –º/—Å`;
    pressureElement.textContent = `${Math.round(weatherData.current.pressure_msl)} –≥–ü–∞`;

    updateForecastUI(weatherData.daily);

    weatherSection.style.display = 'block';
}

function updateForecastUI(dailyData) {
    forecastContainer.innerHTML = '';

    for (let i = 0; i < dailyData.time.length; i++) {
        if (i === 0) continue;

        const date = new Date(dailyData.time[i]);
        const maxTemp = Math.round(dailyData.temperature_2m_max[i]);
        const minTemp = Math.round(dailyData.temperature_2m_min[i]);
        const weatherCode = dailyData.weather_code[i];
        const precipitation = dailyData.precipitation_sum[i];

        const forecastCard = document.createElement('div');
        forecastCard.className = 'forecast-card';

        const weekday = weekdays[date.getDay()];
        const day = date.getDate();
        const month = months[date.getMonth()];

        forecastCard.innerHTML = `
            <div class="forecast-date">${weekday}, ${day} ${month}</div>
            <div class="forecast-icon">${weatherIcons[weatherCode] || 'üåà'}</div>
            <div class="forecast-temp">${maxTemp}¬∞ / ${minTemp}¬∞</div>
            <div class="forecast-desc">${weatherDescriptions[weatherCode] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
            <div class="forecast-precip">${precipitation > 0 ? `–û—Å–∞–¥–∫–∏: ${precipitation} –º–º` : '–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤'}</div>
        `;

        forecastContainer.appendChild(forecastCard);
    }
}

async function searchWeather() {
    const cityName = cityInput.value.trim();

    if (!cityName) {
        showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞');
        return;
    }

    try {
        showLoading(true);

        const locationData = await getCoordinates(cityName);

        const weatherData = await getWeatherData(locationData.latitude, locationData.longitude);

        updateWeatherUI(weatherData, locationData);

        localStorage.setItem('lastCity', cityName);

        hideError();
    } catch (error) {
        showError('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã:', error);
    } finally {
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoading(false);
    }
}


function showError(message) {
    errorMessage.textContent = message;
    errorMessage.style.display = 'block';
    weatherSection.style.display = 'none';
}

function hideError() {
    errorMessage.style.display = 'none';
}

function showLoading(show) {
    loadingIndicator.style.display = show ? 'block' : 'none';
}

document.addEventListener('DOMContentLoaded', initApp);